{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","textareaValue","setTextareaValue","sb","setSb","textareaReff","useRef","useEffect","a","md2sb","convertedSbText","load","current","focus","className","Header","Editor","TextArea","value","onChange","event","target","ref","DisplayArea","styled","div","textarea","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAIaA,EAAM,WAAO,IAAD,EACmBC,mBAAiB,IADpC,mBAChBC,EADgB,KACDC,EADC,OAEHF,mBAAiB,IAFd,mBAEhBG,EAFgB,KAEZC,EAFY,KAGjBC,EAAeC,iBAA4B,MAcjD,OAZAC,qBAAU,YACE,uCAAG,4BAAAC,EAAA,sEACmBC,IAAMR,GADzB,OACLS,EADK,OAEXN,EAAMM,GAFK,2CAAH,qDAIVC,KACC,CAACV,IAEJM,qBAAU,WAAO,IAAD,EACd,UAAAF,EAAaO,eAAb,SAAsBC,UACrB,IAGD,sBAAKC,UAAU,MAAf,UACE,cAACC,EAAD,UACE,oFAEF,eAACC,EAAD,WACE,cAACC,EAAD,CACEC,MAAOjB,EACPkB,SAAU,SAACC,GACTlB,EAAiBkB,EAAMC,OAAOH,QAEhCI,IAAKjB,IAEP,cAACkB,EAAD,CAAaL,MAAOf,WAMtBY,EAASS,IAAOC,IAAV,mJASNT,EAASQ,IAAOC,IAAV,4EAMNR,EAAWO,IAAOE,SAAV,mHAQRH,EAAcC,IAAOE,SAAV,8ECjDFC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.1edaeed3.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from 'react'\nimport styled from '@emotion/styled'\nimport md2sb from 'md2sb'\n\nexport const App = () => {\n  const [textareaValue, setTextareaValue] = useState<string>('')\n  const [sb, setSb] = useState<string>('')\n  const textareaReff = useRef<HTMLTextAreaElement>(null)\n\n  useEffect(() => {\n    const load = async () => {\n      const convertedSbText = await md2sb(textareaValue)\n      setSb(convertedSbText)\n    }\n    load()\n  }, [textareaValue])\n\n  useEffect(() => {\n    textareaReff.current?.focus()\n  }, [])\n\n  return (\n    <div className='App'>\n      <Header>\n        <h1>Markdown記法 → Scrapbox記法</h1>\n      </Header>\n      <Editor>\n        <TextArea\n          value={textareaValue}\n          onChange={(event) => {\n            setTextareaValue(event.target.value)\n          }}\n          ref={textareaReff}\n        />\n        <DisplayArea value={sb} />\n      </Editor>\n    </div>\n  )\n}\n\nconst Header = styled.div`\n  height: 3rem;\n  padding: 0 3rem;\n  display: flex;\n  align-items: center;\n  background: #1ba1ff;\n  color: #fff;\n`\n\nconst Editor = styled.div`\n  flex: 1;\n  display: flex;\n  height: 40rem;\n`\n\nconst TextArea = styled.textarea`\n  background: #333;\n  color: #fff;\n  font-size: 16px;\n  flex: 1;\n  padding: 1rem;\n`\n\nconst DisplayArea = styled.textarea`\n  font-size: 16px;\n  flex: 1;\n  padding: 1rem;\n`\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { App } from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}